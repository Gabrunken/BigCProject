#version 460 core

in vec3 fragPos;
in vec3 normal;

uniform bool smoothShaded = false;
uniform vec4 color;

out vec4 outColor;

void main()
{
	vec3 lightColor = vec3(1.0f);
	vec3 lightPos = vec3(2.0f, 2.0f, 2.0f);

	float ambientStrength = 0.1f;
	float diffuseValue = 0.0f;

	vec3 lightDir = normalize(lightPos - fragPos);

	if(smoothShaded)
	{
		diffuseValue = max(ambientStrength, dot(normalize(normal), lightDir));
	}

	else
	{
		vec3 flatNormal = normalize(
			cross(dFdx(fragPos), dFdy(fragPos))
			);

		diffuseValue = max(ambientStrength, dot(flatNormal, lightDir));
	}

	vec3 finalColor = diffuseValue * lightColor * vec3(color);

	outColor = vec4(finalColor, 1.0f);
}

//#end